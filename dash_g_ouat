from flask import Flask, url_for, redirect, session
from dash import Dash, dcc, html
from dash.dependencies import Input, Output, State
from authlib.integrations.flask_client import OAuth

# Initialize Flask server
server = Flask(__name__)
server.secret_key = 'random secret'

# Initialize OAuth 815453215091GOCSPX
oauth = OAuth(server)

# Register Google OAuth client
google = oauth.register(
    name='google',
    client_id='-o0f6ds10vkg09bsvcc39sg1ume0qfquf.apps.googleusercontent.com',
    client_secret='-Wmur1q9lKdMXDCXJMG-nXj1eiFjq',
    server_metadata_url='https://accounts.google.com/.well-known/openid-configuration',
    api_base_url='https://www.googleapis.com/oauth2/v3/',
    client_kwargs={'scope': 'openid profile email'}
)

# Initialize Dash app
app = Dash(__name__, server=server, url_base_pathname='/')

# Layout of the Dash app
app.layout = html.Div([
    dcc.Location(id='url', refresh=True),
    html.H1("Welcome to the Dash App"),
    html.Div(id='content'),
    html.Button('Login with Google', id='login-button', n_clicks=0),
    html.Div(id='user-info')
])

# Flask routes for OAuth
@server.route('/login')
def login():
    google = oauth.create_client('google')
    redirect_uri = url_for('authorize', _external=True)
    return google.authorize_redirect(redirect_uri)

@server.route('/authorize')
def authorize():
    google = oauth.create_client('google')
    token = google.authorize_access_token()
    resp = google.get('userinfo')
    resp.raise_for_status()
    user_info = resp.json()
    session['email'] = user_info['email']
    return redirect('/')

@server.route('/')
def index():
    return "Dash app is running"

# Dash callback to update content based on URL
@app.callback(
    Output('content', 'children'),
    [Input('url', 'pathname')]
)
def display_page(pathname):
    if 'email' in session:
        return html.Div([
            html.H2(f"Hello, {session['email']}"),
            html.A('Logout', href='/logout')
        ])
    else:
        return html.H2("You are not logged in.")

# Dash callback to handle login button click
@app.callback(
    Output('url', 'pathname'),
    [Input('login-button', 'n_clicks')]
)
def login_redirect(n_clicks):
    if n_clicks > 0:
        return '/login'
    return '/'

@server.route('/logout')
def logout():
    session.pop('email', None)
    return redirect('/')

if __name__ == '__main__':
    app.run_server(debug=True)
